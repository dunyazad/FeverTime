#pragma once

#include <cudaHeaderFiles.h>

#include <Eigen/Core>
#include <Eigen/Dense>
#include <Eigen/Geometry>
namespace Eigen
{
	using Vector4b = Eigen::Vector<unsigned char, 4>;
	using Vector4ui = Eigen::Vector<unsigned int, 4>;
}

#include <stdHeaderFiles.h>

#include <Serialization.hpp>

#define alog(...) printf("\033[38;5;1m\033[48;5;15m(^(OO)^) /V/\033[0m\t" __VA_ARGS__)
#define alogt(tag, ...) printf("\033[38;5;1m\033[48;5;15m [%d] (^(OO)^) /V/\033[0m\t" tag, __VA_ARGS__)

#define CUDART_PI_F 3.1415927f

__device__ __constant__ const int3 neighbor_offsets_26[26] = {
	{1,0,0}, {-1,0,0}, {0,1,0}, {0,-1,0}, {0,0,1}, {0,0,-1},
	{1,1,0}, {1,-1,0}, {-1,1,0}, {-1,-1,0},
	{1,0,1}, {1,0,-1}, {-1,0,1}, {-1,0,-1},
	{0,1,1}, {0,1,-1}, {0,-1,1}, {0,-1,-1},
	{1,1,1}, {1,1,-1}, {1,-1,1}, {1,-1,-1},
	{-1,1,1}, {-1,1,-1}, {-1,-1,1}, {-1,-1,-1}
};

__device__ __constant__ const int3 neighbor_offsets_124[124] = {
	{-2,-2,-2}, {-2,-2,-1}, {-2,-2, 0}, {-2,-2, 1}, {-2,-2, 2},
	{-2,-1,-2}, {-2,-1,-1}, {-2,-1, 0}, {-2,-1, 1}, {-2,-1, 2},
	{-2, 0,-2}, {-2, 0,-1}, {-2, 0, 1}, {-2, 0, 2},
	{-2, 1,-2}, {-2, 1,-1}, {-2, 1, 0}, {-2, 1, 1}, {-2, 1, 2},
	{-2, 2,-2}, {-2, 2,-1}, {-2, 2, 0}, {-2, 2, 1}, {-2, 2, 2},

	{-1,-2,-2}, {-1,-2,-1}, {-1,-2, 0}, {-1,-2, 1}, {-1,-2, 2},
	{-1,-1,-2}, {-1,-1,-1}, {-1,-1, 0}, {-1,-1, 1}, {-1,-1, 2},
	{-1, 0,-2}, {-1, 0,-1}, {-1, 0, 1}, {-1, 0, 2},
	{-1, 1,-2}, {-1, 1,-1}, {-1, 1, 0}, {-1, 1, 1}, {-1, 1, 2},
	{-1, 2,-2}, {-1, 2,-1}, {-1, 2, 0}, {-1, 2, 1}, {-1, 2, 2},

	{ 0,-2,-2}, { 0,-2,-1}, { 0,-2, 0}, { 0,-2, 1}, { 0,-2, 2},
	{ 0,-1,-2}, { 0,-1,-1}, { 0,-1, 0}, { 0,-1, 1}, { 0,-1, 2},
	{ 0, 0,-2}, { 0, 0,-1},            { 0, 0, 1}, { 0, 0, 2},
	{ 0, 1,-2}, { 0, 1,-1}, { 0, 1, 0}, { 0, 1, 1}, { 0, 1, 2},
	{ 0, 2,-2}, { 0, 2,-1}, { 0, 2, 0}, { 0, 2, 1}, { 0, 2, 2},

	{ 1,-2,-2}, { 1,-2,-1}, { 1,-2, 0}, { 1,-2, 1}, { 1,-2, 2},
	{ 1,-1,-2}, { 1,-1,-1}, { 1,-1, 0}, { 1,-1, 1}, { 1,-1, 2},
	{ 1, 0,-2}, { 1, 0,-1}, { 1, 0, 1}, { 1, 0, 2},
	{ 1, 1,-2}, { 1, 1,-1}, { 1, 1, 0}, { 1, 1, 1}, { 1, 1, 2},
	{ 1, 2,-2}, { 1, 2,-1}, { 1, 2, 0}, { 1, 2, 1}, { 1, 2, 2},

	{ 2,-2,-2}, { 2,-2,-1}, { 2,-2, 0}, { 2,-2, 1}, { 2,-2, 2},
	{ 2,-1,-2}, { 2,-1,-1}, { 2,-1, 0}, { 2,-1, 1}, { 2,-1, 2},
	{ 2, 0,-2}, { 2, 0,-1}, { 2, 0, 1}, { 2, 0, 2},
	{ 2, 1,-2}, { 2, 1,-1}, { 2, 1, 0}, { 2, 1, 1}, { 2, 1, 2},
	{ 2, 2,-2}, { 2, 2,-1}, { 2, 2, 0}, { 2, 2, 1}, { 2, 2, 2}
};

struct PointPNC
{
	float3 position;
	float3 normal;
	float3 color;
};

__device__ __host__ float hashToFloat(uint32_t seed);
__device__ __host__ size_t voxel_hash(int3 coord, size_t tableSize);
